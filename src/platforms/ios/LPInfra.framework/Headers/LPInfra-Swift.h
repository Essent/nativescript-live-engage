// Generated by Apple Swift version 3.1 (swiftlang-802.0.48 clang-802.0.38)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if defined(__has_include) && __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if defined(__has_attribute) && __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if defined(__has_attribute) && __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
# if defined(__has_feature) && __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if defined(__has_feature) && __has_feature(modules)
@import ObjectiveC;
@import CoreData;
@import Foundation;
@import UIKit;
@import CoreGraphics;
@import Dispatch;
#endif

#import <LPInfra/LPInfra.h>

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"

SWIFT_CLASS("_TtC7LPInfra15GeneralResponse")
@interface GeneralResponse : NSObject
@property (nonatomic, copy) NSString * _Nullable kind;
@property (nonatomic, copy) NSString * _Nullable reqId;
@property (nonatomic, copy) NSString * _Nullable type;
- (nonnull instancetype)initWithJsonDict:(NSDictionary<NSString *, id> * _Nonnull)jsonDict OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull responseDescription;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC7LPInfra22AgentStateNotification")
@interface AgentStateNotification : GeneralResponse
- (nonnull instancetype)initWithJsonDict:(NSDictionary<NSString *, id> * _Nonnull)jsonDict OBJC_DESIGNATED_INITIALIZER;
@end

@class LPConversationEntity;
@class NSPredicate;

SWIFT_PROTOCOL("_TtP7LPInfra25ConversationParamProtocol_")
@protocol ConversationParamProtocol
- (NSArray<LPConversationEntity *> * _Nullable)getConversations SWIFT_WARN_UNUSED_RESULT;
- (NSArray<LPConversationEntity *> * _Nullable)getConversations:(NSPredicate * _Nullable)predicate SWIFT_WARN_UNUSED_RESULT;
- (NSArray<LPConversationEntity *> * _Nullable)getClosedConversations SWIFT_WARN_UNUSED_RESULT;
- (LPConversationEntity * _Nullable)getActiveConversation SWIFT_WARN_UNUSED_RESULT;
- (LPConversationEntity * _Nullable)getOpenConversation SWIFT_WARN_UNUSED_RESULT;
- (NSArray<LPConversationEntity *> * _Nullable)getLatestClosedConversation:(NSInteger)conversationsCount SWIFT_WARN_UNUSED_RESULT;
- (LPConversationEntity * _Nonnull)createNewConversation SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getQueryType SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isConversationRelatedToQuery:(LPConversationEntity * _Nonnull)conversation SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getBrandID SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getQueryUID SWIFT_WARN_UNUSED_RESULT;
- (NSDictionary<NSString *, id> * _Nonnull)getQueryProperties SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC7LPInfra10BrandQuery")
@interface BrandQuery : NSObject <ConversationParamProtocol>
- (nonnull instancetype)initWithBrandID:(NSString * _Nonnull)brandID OBJC_DESIGNATED_INITIALIZER;
/// Get all conversations by brand.
- (NSArray<LPConversationEntity *> * _Nullable)getConversations SWIFT_WARN_UNUSED_RESULT;
/// Get all conversations by brand, filtered with predicate
- (NSArray<LPConversationEntity *> * _Nullable)getConversations:(NSPredicate * _Nullable)predicate SWIFT_WARN_UNUSED_RESULT;
/// Get active conversation.
- (LPConversationEntity * _Nullable)getActiveConversation SWIFT_WARN_UNUSED_RESULT;
/// Get all closed conversation
- (NSArray<LPConversationEntity *> * _Nullable)getClosedConversations SWIFT_WARN_UNUSED_RESULT;
/// Get open conversation.
- (LPConversationEntity * _Nullable)getOpenConversation SWIFT_WARN_UNUSED_RESULT;
/// Get the latest closed conversation.
- (NSArray<LPConversationEntity *> * _Nullable)getLatestClosedConversation:(NSInteger)conversationsCount SWIFT_WARN_UNUSED_RESULT;
- (LPConversationEntity * _Nonnull)createNewConversation SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getQueryType SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isConversationRelatedToQuery:(LPConversationEntity * _Nonnull)conversation SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getBrandID SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getQueryUID SWIFT_WARN_UNUSED_RESULT;
- (NSDictionary<NSString *, id> * _Nonnull)getQueryProperties SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC7LPInfra18BrandAndSkillQuery")
@interface BrandAndSkillQuery : BrandQuery
- (nonnull instancetype)initWithSkillID:(NSString * _Nonnull)skillID brandID:(NSString * _Nonnull)brandID OBJC_DESIGNATED_INITIALIZER;
/// Get all conversation by brand and skill.
- (NSArray<LPConversationEntity *> * _Nullable)getConversations SWIFT_WARN_UNUSED_RESULT;
/// Get all conversation by brand and skill, filtered with predicate
- (NSArray<LPConversationEntity *> * _Nullable)getConversations:(NSPredicate * _Nullable)predicate SWIFT_WARN_UNUSED_RESULT;
- (LPConversationEntity * _Nonnull)createNewConversation SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getQueryType SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isConversationRelatedToQuery:(LPConversationEntity * _Nonnull)conversation SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getQueryUID SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithBrandID:(NSString * _Nonnull)brandID SWIFT_UNAVAILABLE;
@end



SWIFT_CLASS("_TtC7LPInfra9CSATModel")
@interface CSATModel : NSObject
@property (nonatomic) BOOL skipped;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC7LPInfra13ConsumerQuery")
@interface ConsumerQuery : BrandQuery
- (nonnull instancetype)initWithConsumerID:(NSString * _Nonnull)consumerID brandID:(NSString * _Nonnull)brandID agentToken:(NSString * _Nonnull)agentToken OBJC_DESIGNATED_INITIALIZER;
/// Get all conversations by consumerID.
- (NSArray<LPConversationEntity *> * _Nullable)getConversations SWIFT_WARN_UNUSED_RESULT;
/// Get all conversations by consumerID, filtered with predicate
- (NSArray<LPConversationEntity *> * _Nullable)getConversations:(NSPredicate * _Nullable)predicate SWIFT_WARN_UNUSED_RESULT;
- (LPConversationEntity * _Nonnull)createNewConversation SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getQueryType SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isConversationRelatedToQuery:(LPConversationEntity * _Nonnull)conversation SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getQueryUID SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithBrandID:(NSString * _Nonnull)brandID SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC7LPInfra30ConversationChangeNotification")
@interface ConversationChangeNotification : GeneralResponse
- (nonnull instancetype)initWithJsonDict:(NSDictionary<NSString *, id> * _Nonnull)jsonDict OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_CLASS("_TtC7LPInfra13ErrorResponse")
@interface ErrorResponse : GeneralResponse
- (nonnull instancetype)initWithJsonDict:(NSDictionary<NSString *, id> * _Nonnull)jsonDict OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC7LPInfra32ExConversationChangeNotification")
@interface ExConversationChangeNotification : GeneralResponse
- (nonnull instancetype)initWithJsonDict:(NSDictionary<NSString *, id> * _Nonnull)jsonDict OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_PROTOCOL("_TtP7LPInfra22GeneralManagerProtocol_")
@protocol GeneralManagerProtocol
- (void)clearManager;
@end



SWIFT_CLASS("_TtC7LPInfra15GetBrandProfile")
@interface GetBrandProfile : GeneralResponse
- (nonnull instancetype)initWithJsonDict:(NSDictionary<NSString *, id> * _Nonnull)jsonDict OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC7LPInfra8GetClock")
@interface GetClock : GeneralResponse
- (nonnull instancetype)initWithJsonDict:(NSDictionary<NSString *, id> * _Nonnull)jsonDict OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC7LPInfra14GetUserProfile")
@interface GetUserProfile : GeneralResponse
- (nonnull instancetype)initWithJsonDict:(NSDictionary<NSString *, id> * _Nonnull)jsonDict OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithAcCdnDictionary:(NSDictionary<NSString *, id> * _Nonnull)acCdnDictionary OBJC_DESIGNATED_INITIALIZER;
@end

@class LPBrandEntity;
@class NSEntityDescription;
@class NSManagedObjectContext;

SWIFT_CLASS("_TtC7LPInfra15LPAccountEntity")
@interface LPAccountEntity : NSManagedObject
@property (nonatomic, copy) NSString * _Nonnull accountId;
@property (nonatomic, strong) LPBrandEntity * _Nonnull brand;
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end

@class NSSet;

SWIFT_CLASS("_TtC7LPInfra13LPBrandEntity")
@interface LPBrandEntity : NSManagedObject
@property (nonatomic, copy) NSString * _Nonnull iconURL;
@property (nonatomic, copy) NSString * _Nullable imageURL;
@property (nonatomic, copy) NSString * _Nullable logoURL;
@property (nonatomic, copy) NSString * _Nonnull name;
@property (nonatomic, copy) NSString * _Nonnull uid;
@property (nonatomic, copy) NSString * _Nonnull details;
@property (nonatomic, strong) NSSet * _Nonnull brandCampaigns;
@property (nonatomic, strong) NSSet * _Nonnull brandConversations;
@property (nonatomic, copy) NSDate * _Nonnull dateJoined;
@property (nonatomic) BOOL hidden;
@property (nonatomic, strong) NSSet * _Nonnull accounts;
@property (nonatomic, copy) NSString * _Nullable authenticationCode;
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end


@interface LPBrandEntity (SWIFT_EXTENSION(LPInfra))
- (LPConversationEntity * _Nullable)getCreatedConversation SWIFT_WARN_UNUSED_RESULT;
- (NSArray<LPConversationEntity *> * _Nonnull)getConversations SWIFT_WARN_UNUSED_RESULT;
- (NSArray<LPConversationEntity *> * _Nonnull)getConversations:(NSPredicate * _Nullable)predicate SWIFT_WARN_UNUSED_RESULT;
- (NSDate * _Nonnull)getLastMessageTimeStamp SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isAuthenticated SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC7LPInfra16LPCampaignEntity")
@interface LPCampaignEntity : NSManagedObject
@property (nonatomic, copy) NSString * _Nonnull uid;
@property (nonatomic, copy) NSString * _Nonnull name;
@property (nonatomic, copy) NSString * _Nonnull image;
@property (nonatomic, strong) LPBrandEntity * _Nonnull ownerBrand;
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end

@class UIColor;
@class UIImage;
enum LPLanguage : NSInteger;
enum LPUrlPreviewStyle : NSInteger;

SWIFT_CLASS("_TtC7LPInfra8LPConfig")
@interface LPConfig : NSObject
/// Color code for the background of the remote user bubble.
@property (nonatomic, strong) UIColor * _Nonnull remoteUserBubbleBackgroundColor;
/// Color code for the outline color.
@property (nonatomic, strong) UIColor * _Nonnull remoteUserBubbleBorderColor;
/// Color code for links in the text of the remote user bubble.
@property (nonatomic, strong) UIColor * _Nonnull remoteUserBubbleLinkColor;
/// Color code for the text of the remote user bubble.
@property (nonatomic, strong) UIColor * _Nonnull remoteUserBubbleTextColor;
/// Double number for the outline width.
@property (nonatomic) double remoteUserBubbleBorderWidth;
/// Color code for the timestamp of the remote user bubble.
@property (nonatomic, strong) UIColor * _Nonnull remoteUserBubbleTimestampColor;
/// Color of the remote user typing bubbles animation
@property (nonatomic, strong) UIColor * _Nonnull remoteUserTypingTintColor;
/// Color code for the background of the visitor bubble.
@property (nonatomic, strong) UIColor * _Nonnull userBubbleBackgroundColor;
/// Color code for links in the text of the visitor bubble.
@property (nonatomic, strong) UIColor * _Nonnull userBubbleBorderColor;
/// Color code for links in the text of the visitor bubble.
@property (nonatomic, strong) UIColor * _Nonnull userBubbleLinkColor;
/// Color code for the text of the visitor bubble.
@property (nonatomic, strong) UIColor * _Nonnull userBubbleTextColor;
/// Double number for the outline width.
@property (nonatomic) double userBubbleBorderWidth;
/// Color code for the timestamp of the visitor bubble.
@property (nonatomic, strong) UIColor * _Nonnull userBubbleTimestampColor;
/// Color code for the send status text of the visitor bubble.
@property (nonatomic, strong) UIColor * _Nonnull userBubbleSendStatusTextColor;
/// Color code for the error view text of the visitor bubble.
@property (nonatomic, strong) UIColor * _Nonnull userBubbleErrorTextColor;
/// Color code for the error view border of the visitor bubble.
@property (nonatomic, strong) UIColor * _Nonnull userBubbleErrorBorderColor;
/// Enable or disable link preview feature. If disabled, user will not see site’s link preview or link preview.
@property (nonatomic) BOOL enableLinkPreview;
/// Color code for the background of the link preview area inside cell.
@property (nonatomic, strong) UIColor * _Nonnull linkPreviewBackgroundColor;
/// Color code for the title text inside link preview area inside cell.
@property (nonatomic, strong) UIColor * _Nonnull linkPreviewTitleTextColor;
/// Color code for the description text inside link preview area inside cell.
@property (nonatomic, strong) UIColor * _Nonnull linkPreviewDescriptionTextColor;
/// Color code for the description site name link preview area inside cell.
@property (nonatomic, strong) UIColor * _Nonnull linkPreviewSiteNameTextColor;
/// Color code for border color of link preview area inside cell.
@property (nonatomic, strong) UIColor * _Nonnull linkPreviewBorderColor;
/// Double number for the outline width of link preview area inside cell.
@property (nonatomic) double linkPreviewBorderWidth;
/// Regular expression for email hyperlinks in users messages (consumer and agent). This attribute is optional - If not assigned, the default link detection will be enabled
@property (nonatomic, copy) NSString * _Nullable bubbleEmailLinksRegex;
/// Regular expression for url hyperlinks in users messages (consumer and agent). This attribute is optional - If not assigned, the default link detection will be enabled
@property (nonatomic, copy) NSString * _Nullable bubbleUrlLinksRegex;
/// Regular expression for phone hyperlinks in users messages (consumer and agent). This attribute is optional - If not assigned, the default link detection will be enabled
@property (nonatomic, copy) NSString * _Nullable bubblePhoneLinksRegex;
/// Color code for the text of the system messages.
@property (nonatomic, strong) UIColor * _Nonnull systemBubbleTextColor;
/// DEPRECATED - Custom button icon filename without extension. This will be displayed on the navigation bar.
/// Use customButtonImage instead
@property (nonatomic, copy) NSString * _Nonnull customButtonIconName;
/// Custom button image. This will be displayed on the navigation bar.
@property (nonatomic, strong) UIImage * _Nullable customButtonImage;
@property (nonatomic, copy) NSString * _Nonnull customButtonDescription;
/// Color of checkmark indication signs of Sent messages
@property (nonatomic, strong) UIColor * _Nonnull checkmarkSentColor;
/// Color of checkmark indication signs of Distributed messages
@property (nonatomic, strong) UIColor * _Nonnull checkmarkDistributedColor;
/// Color of checkmark indication signs of Read messages
@property (nonatomic, strong) UIColor * _Nonnull checkmarkReadColor;
/// DEPRECATED - Color of checkmark indication signs of Read messages
/// Use checkmarkReadColor instead
@property (nonatomic, strong) UIColor * _Nonnull checkmarkColor;
@property (nonatomic, copy) NSString * _Nonnull readReceiptTextSent;
@property (nonatomic, copy) NSString * _Nonnull readReceiptTextDistributed;
@property (nonatomic, copy) NSString * _Nonnull readReceiptTextRead;
/// Two options for read indication:
/// Read receipt “text mode”
/// Read receipt “icon mode”
@property (nonatomic) BOOL isReadReceiptTextMode;
/// Corner radius of the Submit button
@property (nonatomic) double csatSubmitButtonCornerRadius;
/// Background color of the Submit button
@property (nonatomic, strong) UIColor * _Nonnull csatSubmitButtonBackgroundColor;
/// Text color of the Submit button
@property (nonatomic, strong) UIColor * _Nonnull csatSubmitButtonTextColor;
/// Background Color of the rating buttons
@property (nonatomic, strong) UIColor * _Nonnull csatRatingButtonSelectedColor;
/// Color for the resolution confirmation buttons (YES/NO) when selected
@property (nonatomic, strong) UIColor * _Nonnull csatResolutionButtonSelectedColor;
@property (nonatomic, copy) NSString * _Nonnull csatResolutionFeedbackText;
@property (nonatomic, copy) NSString * _Nonnull csatResolutionQuestionText;
/// Titles text colors for all labels
@property (nonatomic, strong) UIColor * _Nonnull csatAllTitlesTextColor;
/// Hides the yes/no question
@property (nonatomic) BOOL csatResolutionHidden;
/// Hides the view of agent avatar and name
@property (nonatomic) BOOL csatAgentViewHidden;
/// Hides the Thanks You screen after tapping ‘Submit’ button.
/// <ol>
///   <li>
///     If true, CSAT view will disappear immediately after tapping ‘Submit’.
///   </li>
///   <li>
///     If false, Thank You screen will appear for 2 seconds after tapping ‘Submit’ and then all the CSAT view will disappear
///   </li>
/// </ol>
@property (nonatomic) BOOL csatThankYouScreenHidden;
/// Background color of navigation bar in survey screen
@property (nonatomic, strong) UIColor * _Nonnull csatNavigationBackgroundColor;
/// Navigation title color in survey screen
@property (nonatomic, strong) UIColor * _Nonnull csatNavigationTitleColor;
/// Skip button color in survey screen
@property (nonatomic, strong) UIColor * _Nonnull csatSkipButtonColor;
/// Should display status bar of the survey screen in Light Content Mode (UIStatusBarStyle)
@property (nonatomic) BOOL csatUIStatusBarStyleLightContent;
/// Hides the whole survey view
@property (nonatomic) BOOL csatShowSurveyView;
/// DEPRECATED - number of fetched conversations is defined by maxPreviousConversationToPresent + 1
/// The amount of conversations to fetch on loading
@property (nonatomic) NSUInteger maxConversationToFetch;
/// Amount of conversations to show in advance
@property (nonatomic) NSUInteger maxPreviousConversationToPresent;
/// Upon SDK initialization, all closed conversation with end date older than X months, will get deleted from the database. Setting 0 will delete all closed conversation.
@property (nonatomic) NSUInteger deleteClosedConversationOlderThanMonths;
/// Two options for send message button mode:
/// Send message button in “text mode” - will be taken from localized resources (key = “send”)
/// Send message button in “icon mode” - the default from the SDK
/// Default mode is “text mode”
@property (nonatomic) BOOL isSendMessageButtonInTextMode;
/// Toggle conversation separator text message when conversation resolved from agent or consumer
@property (nonatomic) BOOL enableConversationSeparatorTextMessage;
/// Toggle conversation separator line when conversation resolved from agent or consumer
@property (nonatomic) BOOL enableConversationSeparatorLine;
/// Conversation separator text and line color
@property (nonatomic, strong) UIColor * _Nonnull conversationSeparatorTextColor;
/// Toggle vibration sound when a new message from a remote user received
@property (nonatomic) BOOL enableVibrationOnMessageFromRemoteUser;
/// Scroll to bottom button background color of the whole button
@property (nonatomic, strong) UIColor * _Nonnull scrollToBottomButtonBackgroundColor;
/// Scroll to bottom button text color of the last unread message preview
@property (nonatomic, strong) UIColor * _Nonnull scrollToBottomButtonMessagePreviewTextColor;
/// Scroll to bottom button unread message badge background color
@property (nonatomic, strong) UIColor * _Nonnull scrollToBottomButtonBadgeBackgroundColor;
/// Scroll to bottom button unread message badge text color
@property (nonatomic, strong) UIColor * _Nonnull scrollToBottomButtonBadgeTextColor;
/// Scroll to bottom button arrow tint color
@property (nonatomic, strong) UIColor * _Nonnull scrollToBottomButtonArrowColor;
/// Unread Messages divider background color
@property (nonatomic, strong) UIColor * _Nonnull unreadMessagesDividerBackgroundColor;
/// Unread Messages divider text color
@property (nonatomic, strong) UIColor * _Nonnull unreadMessagesDividerTextColor;
/// Toggle the mode of the Scroll to bottom button
@property (nonatomic) BOOL scrollToBottomButtonEnabled;
/// Toggle the mode of the Scroll to bottom unread message text preview
@property (nonatomic) BOOL scrollToBottomButtonMessagePreviewEnabled;
/// Toggle the mode of the Unread Messages divider. If disabled, scroll to bottom button will scroll to bottom although we can have new messages and don’t show the badge at all nor “new message preview”
@property (nonatomic) BOOL unreadMessagesDividerEnabled;
/// Custom formatting for date string (day, year..), for example: ‘d MMM’.
/// If not defined, one of the default styles will be used
@property (nonatomic, copy) NSString * _Nullable lpDateFormat;
/// Custom formatting for time string (hours, minutes..), for example: ‘hh:mm a’.
/// If not defined, one of the default styles will be used
@property (nonatomic, copy) NSString * _Nullable lpTimeFormat;
/// Custom formatting for date and time string, for example: ‘EEEE MM/dd/YY hh:mm a’.
/// If not defined, one of the default styles will be used
@property (nonatomic, copy) NSString * _Nullable lpDateTimeFormat;
/// Country code - when it is not nil, it will be combined with ‘language’ (”<language>_<country>”, for example: en_US) and used instead of device default locale when formatting date and time.
/// The combined value have to be a part of iOS available Locale identifiers (use Locale.availableIdentifiers to validate). Otherwise, default locale will be used.
/// Note, the 24/12 Hours time style also will be affected by using the specific Locale when formatting times.
/// If no value is provided, the SDK will use the country according to the device’s locale.
@property (nonatomic, copy) NSString * _Nullable country;
/// Language that will be used instead of default device language.
/// It’s type is LPLanguage enum that contains all the languages that are supported by MessagingSDK.
/// It will affect following areas:
/// <ol>
///   <li>
///     will be used when getting localized strings
///   </li>
///   <li>
///     will be combined with ‘country’ (“language_country”, for example: en_US) and used instead of default device locale when formatting time and date.
///     If no value is provided, the SDK will use the device’s language.
///   </li>
/// </ol>
@property (nonatomic) enum LPLanguage language;
/// The brand name will be shown as a title on toolbar when there is no active conversation.
@property (nonatomic, copy) NSString * _Nonnull brandName;
/// Color for the entire view background.
@property (nonatomic, strong) UIColor * _Nonnull conversationBackgroundColor;
/// Color code for date separator title background color
@property (nonatomic, strong) UIColor * _Nonnull dateSeparatorTitleBackgroundColor;
/// Color code for date separator text color
@property (nonatomic, strong) UIColor * _Nonnull dateSeparatorTextColor;
/// Line color of the title of the dates separator in the conversation screen
@property (nonatomic, strong) UIColor * _Nonnull dateSeparatorLineBackgroundColor;
/// Color code for date separator background color
@property (nonatomic, strong) UIColor * _Nonnull dateSeparatorBackgroundColor;
/// Send button color in disabled mode in the conversation screen
@property (nonatomic, strong) UIColor * _Nonnull sendButtonDisabledTextColor;
/// Send button color in enabled mode in the conversation screen
@property (nonatomic, strong) UIColor * _Nonnull sendButtonEnabledTextColor;
/// Send button color in disabled mode in the conversation screen
@property (nonatomic, strong) UIColor * _Nonnull sendButtonDisabledColor;
/// Send button color in enabled mode in the conversation screen
@property (nonatomic, strong) UIColor * _Nonnull sendButtonEnabledColor;
/// User text underline color
@property (nonatomic, strong) UIColor * _Nonnull editTextUnderlineColor;
/// User Input TextView container background color
@property (nonatomic, strong) UIColor * _Nonnull inputTextViewContainerBackgroundColor;
/// User Input TextView corner radius
@property (nonatomic) double inputTextViewCornerRadius;
/// A boolean which determines whether to retrieve the agent details from the last closed conversation in case there is no assigned agent. Agent details will be retrieved from API method: func getAssignedAgent(conversationQuery: ConversationParamProtocol)
@property (nonatomic) BOOL retrieveAssignedAgentFromLastClosedConversation;
/// The show duration of the local notifications view in the SDK
@property (nonatomic) double notificationShowDurationInSeconds;
/// Maximum number of minutes to send the message
@property (nonatomic) NSUInteger sendingMessageTimeoutInMinutes;
/// Custom font name for conversation feed. This font will affect all Messages, Timestamp and Separators.
/// Fonts that are not part of the iOS families, must be defined in App’s Info.plist
@property (nonatomic, copy) NSString * _Nullable customFontNameConversationFeed;
/// Custom font name for all non conversation feed controls. Such as: Buttons, Alerts, Banners, Menu and External Windows.
/// Fonts that are not part of the iOS families, must be defined in App’s Info.plist
@property (nonatomic, copy) NSString * _Nullable customFontNameNonConversationFeed;
/// Should show TTR Shift banner (“An agent will respond…”)
@property (nonatomic) BOOL ttrShowShiftBanner;
/// TTR - Time To Respond Number of seconds before the first TTR notification appears
@property (nonatomic) double ttrFirstTimeDelay;
/// TTR - Time To Respond
/// Enable: Shows a time stamp in the TTR notification.
/// Disable: Shows: “An agent will respond shortly”
@property (nonatomic) BOOL ttrShouldShowTimestamp;
/// TTR - Time To Respond. Enable presentation of ‘Urgent’ button in the TTR notification
/// DEPRECATED - Urgent button was excluded from TTR view. Marking conversation as urgent is available now only from conversation menu
@property (nonatomic) BOOL showUrgentButtonInTTRNotification;
/// Should show Off Hours banner
@property (nonatomic) BOOL showOffHoursBanner;
/// Background color of TTR notification banner view
@property (nonatomic, strong) UIColor * _Nonnull ttrBannerBackgroundColor;
/// Text color of TTR notification banner view
@property (nonatomic, strong) UIColor * _Nonnull ttrBannerTextColor;
/// Opacity level of TTR  banner background (values: 0.0 - 1.0)
@property (nonatomic) double ttrBannerOpacityAlpha;
/// Off Hours banner timezone based on NSTimeZone names
@property (nonatomic, copy) NSString * _Nonnull offHoursTimeZoneName;
/// Enable toast notifications such as offline and TTR notifications
@property (nonatomic) BOOL toastNotificationsEnabled;
/// Control the TTR frequency - Don’t show the TTR more than once in X seconds
@property (nonatomic) NSUInteger ttrShowFrequencyInSeconds;
/// CSDS Domain URL.  For brands that need to control the URL that is the gateway for LivePerson services, use this key to set a URL of your choice.
@property (nonatomic, copy) NSString * _Nonnull csdsDomain;
/// Background color of default remoteUser avatar
@property (nonatomic, strong) UIColor * _Nonnull remoteUserAvatarBackgroundColor;
/// Icon color of default remoteUser avatar
@property (nonatomic, strong) UIColor * _Nonnull remoteUserAvatarIconColor;
/// Default Avatar image of the remote user. When assigned, this image will disable remoteUserAvatarBackgroundColor and remoteUserAvatarIconColor configurations.
/// If remote user has an avatar image in his profile, this attribute will be ignored
@property (nonatomic, strong) UIImage * _Nullable remoteUserDefaultAvatarImage;
/// Default avatar image for Brand.
/// If setting nil - default avatr image will be used.
@property (nonatomic, strong) UIImage * _Nullable brandAvatarImage;
/// Background color of Agent’s default avatar in CSAT
@property (nonatomic, strong) UIColor * _Nonnull csatAgentAvatarBackgroundColor;
/// Icon color of Agent’s default avatar in CSAT
@property (nonatomic, strong) UIColor * _Nonnull csatAgentAvatarIconColor;
/// Expiration of CSAT in minutes from the moment the conversation was ended. If Survey exceeded the expiration, it will not be presented to the user
@property (nonatomic) NSUInteger csatSurveyExpirationInMinutes;
/// Determines whether to enable using regular expression to control which part of the text to mask, all masked data will appear as asterisks, will be saved to local db masked and will be sent to the server unmasked. Default = false
@property (nonatomic) BOOL enableClientOnlyMasking;
/// Determines whether to enable using regular expression to control which part of the text to mask, all masked data will appear as asterisks, will be saved to local db masked and sent to the server masked. Default is false
@property (nonatomic) BOOL enableRealTimeMasking;
/// Regular expression string to control which part of the text to mask, all masked data will appear as asterisks, will be saved to local db masked and will be sent to the server unmasked. Default is empty, means no regex.
@property (nonatomic, copy) NSString * _Nonnull clientOnlyMaskingRegex;
/// Regular expression string to control which part of the text to mask, all masked data will appear as asterisks, will be saved to local db masked and will be sent to the server unmasked. Default is empty, means no regex.
@property (nonatomic, copy) NSString * _Nonnull realTimeMaskingRegex;
/// Enable or disable photo sharing feature
@property (nonatomic) BOOL enablePhotoSharing;
/// Max number of allowed saved files on disk. This refers only to full photo files
/// The validation of allowed max number of files will be when showing and removing conversation
@property (nonatomic) NSUInteger maxNumberOfSavedFilesOnDisk;
/// Camera button color in enabled mode in the conversation screen. Will be presented only if photo sharing feature is enabled
@property (nonatomic, strong) UIColor * _Nonnull cameraButtonEnabledColor;
/// Camera button color in disabled mode in the conversation screen. Will be presented only if photo sharing feature is enabled
@property (nonatomic, strong) UIColor * _Nonnull cameraButtonDisabledColor;
/// File Cell Loader fill color
@property (nonatomic, strong) UIColor * _Nonnull fileCellLoaderFillColor;
/// Color of the loader progress line
@property (nonatomic, strong) UIColor * _Nonnull fileCellLoaderRingProgressColor;
/// Color of the loader progress line background
@property (nonatomic, strong) UIColor * _Nonnull fileCellLoaderRingBackgroundColor;
/// Photosharing menu background color
@property (nonatomic, strong) UIColor * _Nonnull photosharingMenuBackgroundColor;
/// Photosharing menu buttons background color
@property (nonatomic, strong) UIColor * _Nonnull photosharingMenuButtonsBackgroundColor;
/// Photosharing menu buttons tint color
@property (nonatomic, strong) UIColor * _Nonnull photosharingMenuButtonsTintColor;
/// Photosharing menu buttons text color
@property (nonatomic, strong) UIColor * _Nonnull photosharingMenuButtonsTextColor;
/// Background color of navigation bar in conversation screen
@property (nonatomic, strong) UIColor * _Nonnull conversationNavigationBackgroundColor;
/// Navigation title color in conversation screen
@property (nonatomic, strong) UIColor * _Nonnull conversationNavigationTitleColor;
/// Status bar style in conversation screen
@property (nonatomic) UIStatusBarStyle conversationStatusBarStyle;
/// Enable or disable real time link preview feature when the consumer is typing a url
@property (nonatomic) BOOL enableRealTimeLinkPreview;
/// LPUrlPreviewStyle defines the style in which the link prview cells will be shown
/// slim - Small preview space with a small image, a title and a description
/// large - Large preview space with a large image, a title and a description
@property (nonatomic) enum LPUrlPreviewStyle urlPreviewStyle;
/// urlPreview will also use non og tags to parse urls instead of using only og tags if useNonOGTagsForLinkPreview is true
@property (nonatomic) BOOL useNonOGTagsForLinkPreview;
/// urlRealTimePreviewBackgroundColor is the color of the background color of the main view
@property (nonatomic, strong) UIColor * _Nonnull urlRealTimePreviewBackgroundColor;
/// urlRealTimePreviewBorderColor is the color of the border of the main view
@property (nonatomic, strong) UIColor * _Nonnull urlRealTimePreviewBorderColor;
/// urlRealTimePreviewBorderWidth is the width of the border of the main view
@property (nonatomic) CGFloat urlRealTimePreviewBorderWidth;
/// urlRealTimePreviewTitleTextColor is the color of the title at the top of the main view
@property (nonatomic, strong) UIColor * _Nonnull urlRealTimePreviewTitleTextColor;
/// urlRealTimePreviewDescriptionTextColor is the color of the description at the bottom of the main view
@property (nonatomic, strong) UIColor * _Nonnull urlRealTimePreviewDescriptionTextColor;
/// Back button color in secure form screen
@property (nonatomic, strong) UIColor * _Nonnull secureFormBackButtonColor;
/// Should display status bar of the secure form screen in Light Content Mode (UIStatusBarStyle)
@property (nonatomic) BOOL secureFormUIStatusBarStyleLightContent;
/// Background color of navigation bar in secure form screen
@property (nonatomic, strong) UIColor * _Nonnull secureFormNavigationBackgroundColor;
/// Navigation title color in secure form screen
@property (nonatomic, strong) UIColor * _Nonnull secureFormNavigationTitleColor;
/// Secure form bubble background color
@property (nonatomic, strong) UIColor * _Nonnull secureFormBubbleBackgroundColor;
/// Secure form bubble border color
@property (nonatomic, strong) UIColor * _Nonnull secureFormBubbleBorderColor;
/// Secure form bubble border width in pixels
@property (nonatomic) double secureFormBubbleBorderWidth;
/// Secure form bubble form title color
@property (nonatomic, strong) UIColor * _Nonnull secureFormBubbleTitleColor;
/// Secure form bubble form description color
@property (nonatomic, strong) UIColor * _Nonnull secureFormBubbleDescriptionColor;
/// Secure form bubble fill form button text color
@property (nonatomic, strong) UIColor * _Nonnull secureFormBubbleFillFormButtonTextColor;
/// Secure form bubble fill form button background color
@property (nonatomic, strong) UIColor * _Nonnull secureFormBubbleFillFormButtonBackgroundColor;
/// Secure form bubble form image tint color
@property (nonatomic, strong) UIColor * _Nonnull secureFormBubbleFormImageTintColor;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) LPConfig * _Nonnull defaultConfiguration;)
+ (LPConfig * _Nonnull)defaultConfiguration SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
/// Resets LPConfig to default values.
- (void)resetToDefaultConfiguration;
/// Fallback in case setValueForKey failed. This method is necessary as the host app might call a deprecated value which will cause an NSUnknownKeyException if this method is not implemented.
/// \param value The value of the unknown key
///
/// \param key The key which wasn’t found in LPConfig
///
- (void)setValue:(id _Nullable)value forUndefinedKey:(NSString * _Nonnull)key;
/// Prints all the configurations keys of the SDK
+ (void)printAllConfigurations;
@end

typedef SWIFT_ENUM(NSInteger, LPConversationCloseReason) {
  LPConversationCloseReasonAgent = 0,
  LPConversationCloseReasonConsumer = 1,
  LPConversationCloseReasonSystem = 2,
};

@class NSOrderedSet;
@class NSNumber;
@class NSMutableSet;

SWIFT_CLASS("_TtC7LPInfra20LPConversationEntity")
@interface LPConversationEntity : NSManagedObject
@property (nonatomic, copy) NSString * _Nullable uid;
@property (nonatomic, copy) NSDate * _Nonnull creationDate;
@property (nonatomic, copy) NSString * _Nonnull handlerId;
@property (nonatomic, copy) NSString * _Nullable lastMessage;
@property (nonatomic, copy) NSDate * _Nullable lastMessageDate;
@property (nonatomic, strong) LPBrandEntity * _Nonnull ownerBrand;
@property (nonatomic, strong) NSSet * _Nonnull participants;
@property (nonatomic, strong) NSOrderedSet * _Nonnull conversationMessages;
@property (nonatomic, copy) NSString * _Nonnull stateRaw;
@property (nonatomic, strong) NSNumber * _Nonnull lastReceivedSequence;
@property (nonatomic) BOOL hidden;
@property (nonatomic) BOOL resolved;
@property (nonatomic) BOOL isResolvedByRemoteUser;
@property (nonatomic, copy) NSString * _Nullable closeReason;
@property (nonatomic, copy) NSString * _Nonnull ttrTypeRaw;
@property (nonatomic, copy) NSString * _Nullable type;
@property (nonatomic, copy) NSString * _Nullable assignedAgentId;
@property (nonatomic, copy) NSString * _Nullable consumerId;
@property (nonatomic, strong) NSMutableSet * _Nonnull currentlyAcceptedSequences;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end

@class LPMessageEntity;
@class LPUserEntity;

@interface LPConversationEntity (SWIFT_EXTENSION(LPInfra))
@property (nonatomic, readonly, copy) NSArray<LPMessageEntity *> * _Nonnull sortedMessages;
@property (nonatomic, readonly, copy) NSArray<LPMessageEntity *> * _Nonnull unreadMessages;
@property (nonatomic, readonly, strong) LPMessageEntity * _Nullable lastMessageObj;
@property (nonatomic, readonly, strong) LPUserEntity * _Nullable lastMessageOriginator;
@property (nonatomic, readonly, copy) NSString * _Nonnull relatedSocketID;
- (BOOL)isActivityInIdle SWIFT_WARN_UNUSED_RESULT;
- (NSArray<LPMessageEntity *> * _Nonnull)getMessagesPage:(NSInteger)from pageSize:(NSInteger)pageSize SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isCurrentlyUrgent SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) BOOL isResolvedAutomatically;
/// Sequence number is received from the QueryMessages or from OnlineEvent messages. Sequence number is increased by the server for both new message and accept status (ACCEPT/READ).
/// If the sequence number is following to what we have, set it as the last one
/// If not, save it in a temporary array in order to set it as the last one in the future
/// After words, it goes through self.currentlyAcceptedSequences and sets each object as the last one if it is following to the current last one (and removes from the temporary array)
- (void)acceptSequence:(NSInteger)seq;
- (void)resolve;
- (void)resolve:(NSString * _Nonnull)closeReason;
/// TODO:
/// Move this function to UITimestampsFormatter once the new system messages will be implemented and the timestamp will not be saved to DB.
- (NSString * _Nonnull)getResolveDateString:(NSDate * _Nonnull)date SWIFT_WARN_UNUSED_RESULT;
+ (LPConversationEntity * _Nonnull)createNewConversation:(LPBrandEntity * _Nonnull)brand SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) BOOL shouldQueryMessages;
@property (nonatomic, readonly) BOOL isOpen;
/// Determines if CSAT should be displayed for the conversation based on
/// Configuation, agent details and previous CSAT submission
@property (nonatomic, readonly) BOOL canShowCSAT;
@end


SWIFT_CLASS("_TtC7LPInfra19LPCustomBoardEntity")
@interface LPCustomBoardEntity : NSManagedObject
@property (nonatomic, copy) NSString * _Nonnull uid;
@property (nonatomic, strong) NSOrderedSet * _Nonnull customItems;
@property (nonatomic, strong) LPMessageEntity * _Nonnull ownerMessage;
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end


@interface LPCustomBoardEntity (SWIFT_EXTENSION(LPInfra))
/// Calculates the height of the board by summarizing the heights of
/// the customItems on that board
@property (nonatomic, readonly) CGFloat height;
@end

@class NSError;

SWIFT_CLASS("_TtC7LPInfra18LPCustomItemEntity")
@interface LPCustomItemEntity : NSManagedObject
@property (nonatomic, copy) NSString * _Nonnull uid;
@property (nonatomic, copy) NSString * _Nonnull type;
@property (nonatomic, copy) NSString * _Nonnull url;
@property (nonatomic, copy) NSString * _Nullable captionTitle;
@property (nonatomic, copy) NSString * _Nullable captionDescription;
@property (nonatomic, copy) NSString * _Nullable captionSiteName;
@property (nonatomic, copy) NSString * _Nullable relativeImagePath;
@property (nonatomic, copy) NSString * _Nullable imageURL;
@property (nonatomic, copy) NSString * _Nullable imageState;
@property (nonatomic, strong) LPCustomBoardEntity * _Nonnull ownerCustomBoard;
@property (nonatomic, copy) void (^ _Nullable imageDownloadCompleted)(UIImage * _Nullable);
@property (nonatomic, copy) void (^ _Nullable imageDownloadFailed)(NSError * _Nonnull);
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end


@interface LPCustomItemEntity (SWIFT_EXTENSION(LPInfra))
- (void)setImageWithImage:(UIImage * _Nullable)image relativePath:(NSString * _Nonnull)relativePath;
/// Get custom image. First look for an image from RAM, then look for an image from DISK, lastely, download image from url
/// \param completion completion with optional UIImage
///
- (void)getImageWithCompletion:(void (^ _Nonnull)(UIImage * _Nullable))completion failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
- (UIImage * _Nullable)getImageFromCache SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_PROTOCOL("_TtP7LPInfra24LPDataManagerSDKDelegate_")
@protocol LPDataManagerSDKDelegate
- (void)LPMessagingSDKDataEncryptionFailed:(NSError * _Nonnull)error;
@end

@class NSDate;

SWIFT_CLASS("_TtC7LPInfra12LPFileEntity")
@interface LPFileEntity : NSManagedObject
@property (nonatomic, copy) NSString * _Nullable fileExtension;
@property (nonatomic, copy) NSString * _Nonnull uid;
@property (nonatomic, copy) NSString * _Nullable state;
@property (nonatomic, copy) NSString * _Nullable fileName;
@property (nonatomic, copy) NSString * _Nullable relativeFilePath;
@property (nonatomic, copy) NSString * _Nullable relativeThumbnailPath;
@property (nonatomic, strong) NSNumber * _Nullable fileSize;
@property (nonatomic, strong) NSDate * _Nullable creationDate;
@property (nonatomic, strong) LPMessageEntity * _Nullable ownerMessage;
@property (nonatomic, copy) NSString * _Nullable swiftRelativePath;
@property (nonatomic, strong) UIImage * _Nullable thumbnailImage;
@property (nonatomic, copy) void (^ _Nullable completion)(void);
@property (nonatomic, copy) void (^ _Nullable failure)(NSError * _Nonnull);
@property (nonatomic, copy) void (^ _Nullable preUpload)(void);
@property (nonatomic, copy) void (^ _Nullable preDownload)(void);
@property (nonatomic, copy) void (^ _Nullable uploading)(double);
@property (nonatomic) CGFloat uploadPercentage;
@property (nonatomic, copy) void (^ _Nullable downloading)(double);
@property (nonatomic) CGFloat downloadPercentage;
@property (nonatomic, copy) void (^ _Nullable synced)(void);
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end


@interface LPFileEntity (SWIFT_EXTENSION(LPInfra))
/// Checks if File contains thumbnail
/// If not, get it from the disk, assign it to file and return it
/// Else, just return it
- (UIImage * _Nullable)getThumbnailImage SWIFT_WARN_UNUSED_RESULT;
/// Determines if the file is currently being tranffering (download/upload)
@property (nonatomic, readonly) BOOL isTransferring;
@end


SWIFT_CLASS("_TtC7LPInfra12LPFormEntity")
@interface LPFormEntity : NSManagedObject
@property (nonatomic, copy) NSString * _Nonnull formID;
@property (nonatomic, copy) NSString * _Nonnull invitationID;
@property (nonatomic, copy) NSString * _Nonnull state;
@property (nonatomic, copy) NSString * _Nullable title;
@property (nonatomic, copy) NSString * _Nullable submissionID;
@property (nonatomic, strong) NSOrderedSet * _Nonnull ownerMessages;
@property (nonatomic, copy) NSString * _Nullable readOTK;
@property (nonatomic, copy) NSString * _Nullable writeOTK;
@property (nonatomic, copy) NSURL * _Nullable url;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end


@interface LPFormEntity (SWIFT_EXTENSION(LPInfra))
/// Create new File instance with UID
+ (LPFormEntity * _Nonnull)createNewFormWithFormID:(NSString * _Nonnull)formID invitationID:(NSString * _Nonnull)invitationID title:(NSString * _Nullable)title ownerMessage:(LPMessageEntity * _Nonnull)ownerMessage SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, strong) LPConversationEntity * _Nonnull ownerConversation;
@end

@class LPWebSocket;
@class LPUser;

SWIFT_CLASS("_TtC7LPInfra13LPInfraFacade")
@interface LPInfraFacade : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (BOOL)initializeInfra SWIFT_WARN_UNUSED_RESULT;
/// This method created ConversationParamProtocol of Brand query type.
+ (id <ConversationParamProtocol> _Nonnull)getConversationBrandQuery:(NSString * _Nonnull)brandID SWIFT_WARN_UNUSED_RESULT;
/// This method created ConversationParamProtocol of Brand and Skill query type.
+ (id <ConversationParamProtocol> _Nonnull)getConversationBrandAndSkillQuery:(NSString * _Nonnull)brandID skillID:(NSString * _Nonnull)skillID SWIFT_WARN_UNUSED_RESULT;
/// This method created ConversationParamProtocol of Consumer and Skill query type.
+ (id <ConversationParamProtocol> _Nonnull)getConversationConsumerQuery:(NSString * _Nullable)consumerID brandID:(NSString * _Nonnull)brandID agentToken:(NSString * _Nonnull)agentToken SWIFT_WARN_UNUSED_RESULT;
/// Get current WebSocket (LPWebSocket) for brand if exists
+ (LPWebSocket * _Nullable)getSocket:(NSString * _Nonnull)brandID SWIFT_WARN_UNUSED_RESULT;
/// Open and reconnect each WebSocket in the web sockets map.
+ (void)openAllSockets;
/// Open and reconnect single WebSocket and assign to web sockets map.
/// This method creates new WebSocket instances based on the previous ones because we can’t reuse WebSocket instances.
+ (void)openSocket:(LPWebSocket * _Nonnull)webSocket;
/// Close all sockets in the web sockets map
/// We DON’T remove the web sockets from the map in order to be able to re-create web socket from a previous one
+ (void)closeAllSockets;
/// Remove all sockets from web sockets map and clear their open requests
+ (void)removeSockets;
+ (void)saveData:(NSManagedObjectContext * _Nullable)givenContext;
+ (void)saveContext;
+ (NSManagedObjectContext * _Nonnull)getContext SWIFT_WARN_UNUSED_RESULT;
+ (void)saveDataWithGetContextFrom:(NSManagedObject * _Nullable)obj;
+ (BOOL)deleteManagedObject:(NSManagedObject * _Nonnull)object context:(NSManagedObjectContext * _Nullable)givenContext SWIFT_WARN_UNUSED_RESULT;
+ (void)resetDatabaseWithCompletion:(void (^ _Nonnull)(BOOL))completion;
+ (void)refreshDatabase;
/// Clear all singleton managers with their properties from memory.
/// This method will release any data objects and data structures.
+ (void)clearManagers;
/// Upload File to Swift server and AMS using file operation
+ (void)uploadFileWithFile:(LPFileEntity * _Nonnull)file uploadRelativePath:(NSString * _Nonnull)uploadRelativePath tempURLSig:(NSString * _Nonnull)tempURLSig tempURLExpiry:(NSString * _Nonnull)tempURLExpiry completion:(void (^ _Nonnull)(LPFileEntity * _Nonnull))completion failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Download file/photo from swift server
+ (void)downloadFileWithFile:(LPFileEntity * _Nonnull)file relativePath:(NSString * _Nonnull)relativePath tempURLSig:(NSString * _Nonnull)tempURLSig tempURLExpiry:(NSString * _Nonnull)tempURLExpiry completion:(void (^ _Nonnull)(LPFileEntity * _Nonnull))completion failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Get full photo image from disk using file path.
/// If file path is invalid, an error will be invoked.
/// If file does not exist, function will return nil
+ (void)getPhotoFromFileWithFile:(LPFileEntity * _Nonnull)file completion:(SWIFT_NOESCAPE void (^ _Nonnull)(UIImage * _Nullable))completion failure:(SWIFT_NOESCAPE void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Get full thumbnail image from disk using file path.
/// If image fails to created or file path is invalid, an error will be invoked.
+ (UIImage * _Nullable)getThumbnailFromFileWithFile:(LPFileEntity * _Nonnull)file SWIFT_WARN_UNUSED_RESULT;
/// Returns a base64 string representation of the file’s thumbnail
+ (void)getBase64ThumbnailStringWithFile:(LPFileEntity * _Nonnull)file completion:(SWIFT_NOESCAPE void (^ _Nonnull)(NSString * _Nonnull))completion failure:(SWIFT_NOESCAPE void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Deletes file and thumbnail from disk
+ (void)deleteFileFromDiskWithFile:(LPFileEntity * _Nonnull)file;
/// Deleting the main directory with all files in it.
/// This method is performed in background thread
+ (void)deleteAllFilesFromDisk;
/// This method delete number of files that exceeded maxNumberOfSavedFilesOnDisk from configuration.
/// The files will be get deleted accoring to FIFO methodology.
/// This method is performed in background thread and only of the photo sharing feature is enabled
+ (void)handleMaxNumberOfSavedFilesOnDisk;
/// Get root path where all SDK files are stored
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull filesDirectoryPath;)
+ (NSString * _Nonnull)filesDirectoryPath SWIFT_WARN_UNUSED_RESULT;
/// Get Brand object for account ID
/// If there is no brand object for the account ID, a new brand will be created in DB
+ (LPBrandEntity * _Nonnull)getOrCreateBrandByAccountID:(NSString * _Nonnull)accountID SWIFT_WARN_UNUSED_RESULT;
/// Clear a single conversation and its assoicated messages and files.
/// Return TRUE if the conversation and its messages was deleted.
/// Return FALSE if the conversation or one if its messages were failed to delete.
+ (BOOL)clearConversationFromDB:(LPConversationEntity * _Nonnull)conversation SWIFT_WARN_UNUSED_RESULT;
/// Delete all closed conversation and their
+ (BOOL)clearHistory:(id <ConversationParamProtocol> _Nonnull)conversationQuery SWIFT_WARN_UNUSED_RESULT;
/// Delete any closed conversations which has close date older than the configured number of months
/// <ul>
///   <li>
///     When a candidate conversation was found - first delete all its messages and when done, delete the conversation
///   </li>
/// </ul>
+ (void)deleteOldConversations;
/// Get all closed conversations
+ (NSArray<LPConversationEntity *> * _Nullable)getAllClosedConversations:(NSDate * _Nullable)olderThanDate SWIFT_WARN_UNUSED_RESULT;
/// Get all conversations from DB sorted by creation date (first object is the latest conversation)
/// If includeQueriedOnly parameter is false, only new conversations or conversations which messages should not be queried, will be returned
+ (NSArray<LPConversationEntity *> * _Nonnull)getConversationsSortedByDate:(id <ConversationParamProtocol> _Nonnull)query includeQueriedOnly:(BOOL)includeQueriedOnly SWIFT_WARN_UNUSED_RESULT;
/// Get conversation by handlerID from DB.
/// \param handlerID conversation handlerID
///
///
/// returns:
/// If conversation doens’t exist in DB nil will be returned
+ (LPConversationEntity * _Nullable)getConversationByHandlerID:(NSString * _Nonnull)handlerID SWIFT_WARN_UNUSED_RESULT;
/// Get open conversation from DB
///
/// returns:
/// an open conversation if exists - if none, returns nil
+ (LPConversationEntity * _Nullable)getOpenConveration SWIFT_WARN_UNUSED_RESULT;
/// This method fetch user profile from the server.
/// <ul>
///   <li>
///     Fetch user data from server
///   </li>
///   <li>
///     Save to DB
///   </li>
///   <li>
///     Return User to completion block
///   </li>
/// </ul>
+ (void)fetchUser:(NSString * _Nonnull)brandID userID:(NSString * _Nonnull)userID isMe:(BOOL)isMe completion:(void (^ _Nullable)(LPUserEntity * _Nonnull))completion failure:(void (^ _Nullable)(NSError * _Nonnull))failure;
/// Attach completion block which is being invoken when the Consumer (My) User is retrieved
+ (void)attachMyUserCompletion:(void (^ _Nonnull)(NSString * _Nonnull))completion;
/// This method fetch user from the database.
/// <ul>
///   <li>
///     Fetch user data from database
///   </li>
///   <li>
///     If user does not exist, a nil will be returned
///   </li>
/// </ul>
+ (LPUserEntity * _Nullable)getUserFromDatabaseWithUserID:(NSString * _Nonnull)userID SWIFT_WARN_UNUSED_RESULT;
/// Fetching the user profile (consumer or agent) from server and update in database received details and current date as lastUpdated
/// Fetch will be performed in the following cases:
/// <ol>
///   <li>
///     User was never fetched
///   </li>
///   <li>
///     User was not fetched in current app run
///   </li>
///   <li>
///     User was not fetched for more than 24Hrs
///   </li>
/// </ol>
+ (void)refreshUserProfileWithBrandID:(NSString * _Nonnull)brandID user:(LPUserEntity * _Nonnull)user;
/// Set user profile in database with details of user
+ (void)setUserProfileWithDetails:(LPUser * _Nonnull)lpuser brandID:(NSString * _Nonnull)brandID;
/// Get default agent user from DB
/// If there is no agent user in db, a new instance will be created and saved to db with default values
+ (LPUserEntity * _Nonnull)getDefaultAgentUserFromDB:(NSString * _Nonnull)senderId SWIFT_WARN_UNUSED_RESULT;
/// Get MY user ID from memory if exists
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nullable myUserID;)
+ (NSString * _Nullable)myUserID SWIFT_WARN_UNUSED_RESULT;
+ (void)myUserIDFetchedFromJWTWithMyUserID:(NSString * _Nonnull)myUserID;
/// Handle agent details that fetched and notifiy for fetched user
/// User details can be nil incase there should be notify for no assigned agent
+ (void)agentDetailsDidFetchWithUser:(LPUserEntity * _Nullable)user;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL isNetworkReachable;)
+ (BOOL)isNetworkReachable SWIFT_WARN_UNUSED_RESULT;
/// Load image from URL from a server or from the images cache manager
+ (void)loadImageFromURLWithImageUrl:(NSString * _Nullable)imageUrl completion:(void (^ _Nonnull)(UIImage * _Nullable, BOOL))completion failure:(void (^ _Nullable)(void))failure;
/// Set image for URL in images cache
+ (void)setImageByURL:(UIImage * _Nonnull)image url:(NSString * _Nonnull)url;
/// Get image by URL from images cache
+ (UIImage * _Nullable)getImageByURL:(NSString * _Nonnull)url SWIFT_WARN_UNUSED_RESULT;
/// Send local notification (from type: UILocalNotification) in iOS notification center
+ (void)sendLocalNotification:(NSString * _Nonnull)text uid:(NSString * _Nullable)uid;
+ (NSString * _Nonnull)getAppIdentifier SWIFT_WARN_UNUSED_RESULT;
/// Register pusher with push notification token received from APNS (Apple).
/// Before registering the Pusher, we make sure have the following params:
/// <ul>
///   <li>
///     Consumer UserID
///   </li>
///   <li>
///     Push Token from Apple
///   </li>
///   <li>
///     CSDS Domain for Pusher
///   </li>
///   <li>
///     Account (brand account)
///     When all params availble - perform register
///   </li>
/// </ul>
+ (void)registerPusher:(LPBrandEntity * _Nonnull)brand;
/// Unregister pusher.
/// Before unregistering the Pusher, we make sure we have the following params:
/// <ul>
///   <li>
///     Consumer UserID
///   </li>
///   <li>
///     CSDS Domain for Pusher
///   </li>
///   <li>
///     Account (brand account)
///     When all params availble - perform unregister
///   </li>
/// </ul>
+ (void)unregisterPusher:(LPBrandEntity * _Nonnull)brand;
/// Returns a string value for a specified key.
/// \param keyName The key to lookup data for.
///
///
/// returns:
/// The String associated with the key if it exists. If no data exists, or the data found cannot be encoded as a string, returns nil.
+ (NSString * _Nullable)keychainStringForKey:(NSString * _Nonnull)keyName SWIFT_WARN_UNUSED_RESULT;
/// Save a String value to the keychain associated with a specified key. If a String value already exists for the given keyname, the string will be overwritten with the new value.
/// \param value The String value to save.
///
/// \param forKey The key to save the String under.
///
///
/// returns:
/// True if the save was successful, false otherwise.
+ (BOOL)setKeychainString:(NSString * _Nonnull)value forKey:(NSString * _Nonnull)keyName SWIFT_WARN_UNUSED_RESULT;
/// Remove a string associated with a specified key.
/// \param keyName The key value to remove data for.
///
///
/// returns:
/// True if successful, false otherwise.
+ (BOOL)removeKeychainStringForKey:(NSString * _Nonnull)keyName SWIFT_WARN_UNUSED_RESULT;
/// Remove all object from keychain
+ (BOOL)removeAllKeychainObjects SWIFT_WARN_UNUSED_RESULT;
+ (NSArray<LPMessageEntity *> * _Nullable)getMessagesOfLatestConversation:(id <ConversationParamProtocol> _Nonnull)query SWIFT_WARN_UNUSED_RESULT;
+ (NSArray<LPMessageEntity *> * _Nonnull)getMessagesFromConversationWithConversation:(LPConversationEntity * _Nonnull)conversation SWIFT_WARN_UNUSED_RESULT;
/// Get next conversation which messages need to query.
/// Calculating of next conversation is done by gathering all the conversations that needs to be queried, and the one with the latest creationDate
+ (LPConversationEntity * _Nullable)getNextConversationForQueryMessagesIfExists:(id <ConversationParamProtocol> _Nonnull)query SWIFT_WARN_UNUSED_RESULT;
/// Get all conversations per query and params.
/// <ul>
///   <li>
///     QueryParamProtocol: protocol of the current requested type
///   </li>
/// </ul>
+ (NSArray<LPConversationEntity *> * _Nullable)getConversations:(id <ConversationParamProtocol> _Nonnull)query predicate:(NSPredicate * _Nullable)predicate SWIFT_WARN_UNUSED_RESULT;
/// Get all active conversations per query and params.
/// <ul>
///   <li>
///     QueryParamProtocol: protocol of the current requested type
///   </li>
/// </ul>
+ (LPConversationEntity * _Nullable)getActiveConversation:(id <ConversationParamProtocol> _Nonnull)query SWIFT_WARN_UNUSED_RESULT;
/// Get the newest (latest) close conversation if exists
/// <ul>
///   <li>
///     QueryParamProtocol: protocol of the current requested type
///   </li>
/// </ul>
+ (NSArray<LPConversationEntity *> * _Nullable)getLatestClosedConversations:(id <ConversationParamProtocol> _Nonnull)query conversationsCount:(NSInteger)conversationsCount SWIFT_WARN_UNUSED_RESULT;
+ (LPConversationEntity * _Nonnull)createConversation:(id <ConversationParamProtocol> _Nonnull)query SWIFT_WARN_UNUSED_RESULT;
/// Clear a initial created conversation and its assoicated messages.
/// An initial created conversation is a conversation which is created and now only shows welcome message
/// Before removing the conversation, we are checking that there is no multiple messages which are still not sent to prevent cases when new conversation with messages still not synced with server and may be deleted
/// \param conversation initial conversation to delete from DB
///
///
/// returns:
/// true if deleted from DB, else false
+ (BOOL)clearInitialCreatedConversation:(LPConversationEntity * _Nonnull)conversation SWIFT_WARN_UNUSED_RESULT;
/// Get the assigned agent of the recent open/closed conversation if exists.
+ (LPUserEntity * _Nullable)getAssignedAgent:(id <ConversationParamProtocol> _Nonnull)query SWIFT_WARN_UNUSED_RESULT;
/// Returns the message boards if exist.
/// The message boards are the structured content data structures
/// built from the html meta data of the source url
+ (void)getMessageBoardsWithUrl:(NSURL * _Nonnull)url completion:(void (^ _Nonnull)(NSArray<LPCustomBoardEntity *> * _Nonnull))completion failure:(void (^ _Nonnull)(NSError * _Nullable))failure;
/// Delete preview images directory from disk and all its content
+ (void)deleteAllPreviewImagesFromDisk;
/// Get expiration token of a JWT from a token string
/// \param jwtToken JWT string to extract the expiration from
///
///
/// returns:
/// expiration Data instance or nil incase JWT failed to be decoded
+ (NSDate * _Nullable)getExpirationDateFromJWT:(NSString * _Nonnull)jwtToken SWIFT_WARN_UNUSED_RESULT;
/// Get UserID of a JWT from a token string
/// \param jwtToken jwtToken: JWT string to extract the userID from
///
///
/// returns:
/// userID String or nil incase JWT failed to be decoded
+ (NSString * _Nullable)getUserIDFromJWT:(NSString * _Nonnull)jwtToken SWIFT_WARN_UNUSED_RESULT;
@end

/// All SDK supported languages
/// The enum contains general languages and specific if exists.
/// For example: Portuguese from ‘pt’ folder will be used for all regions when the language is Portuguese. Portuguese from ‘pt-PT’ folder will be used for Portugal region only when the language is Portuguese (Portugal)
typedef SWIFT_ENUM(NSInteger, LPLanguage) {
  LPLanguageDevice = 0,
  LPLanguageEn = 1,
  LPLanguageEn_GB = 2,
  LPLanguagePt = 3,
  LPLanguagePt_PT = 4,
  LPLanguageFr = 5,
  LPLanguageBg = 6,
  LPLanguageCs = 7,
  LPLanguageDa = 8,
  LPLanguageSr = 9,
  LPLanguageDe = 10,
  LPLanguageEl = 11,
  LPLanguageHe_IL = 12,
  LPLanguageEs = 13,
  LPLanguageEt = 14,
  LPLanguageFi = 15,
  LPLanguageHi = 16,
  LPLanguageHr = 17,
  LPLanguageHu = 18,
  LPLanguageIt = 19,
  LPLanguageJa = 20,
  LPLanguageKo = 21,
  LPLanguageLt = 22,
  LPLanguageLv = 23,
  LPLanguageMk = 24,
  LPLanguageNb = 25,
  LPLanguageNl = 26,
  LPLanguagePl = 27,
  LPLanguageRo = 28,
  LPLanguageRu = 29,
  LPLanguageSl = 30,
  LPLanguageSk = 31,
  LPLanguageSv = 32,
  LPLanguageTh = 33,
  LPLanguageTr = 34,
  LPLanguageUk = 35,
  LPLanguageVi = 36,
  LPLanguageZh = 37,
  LPLanguageZh_Hans = 38,
  LPLanguageZh_Hant_hk = 39,
};


SWIFT_CLASS("_TtC7LPInfra5LPLog")
@interface LPLog : NSObject
@property (nonatomic, copy) NSString * _Nullable timestamp;
@property (nonatomic, copy) NSString * _Nullable className;
@property (nonatomic, copy) NSString * _Nullable funcName;
@property (nonatomic, copy) NSString * _Nullable text;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC7LPInfra15LPMessageEntity")
@interface LPMessageEntity : NSManagedObject
@property (nonatomic, copy) NSDate * _Nonnull timestamp;
@property (nonatomic, copy) NSString * _Nonnull content;
@property (nonatomic, copy) NSString * _Nullable uid;
@property (nonatomic, copy) NSString * _Nonnull statusRaw;
@property (nonatomic, copy) NSString * _Nonnull contentType;
@property (nonatomic, copy) NSString * _Nonnull messageType;
@property (nonatomic, strong) LPConversationEntity * _Nonnull ownerConversation;
@property (nonatomic, strong) LPUserEntity * _Nullable ownerUser;
@property (nonatomic, strong) LPFileEntity * _Nullable file;
@property (nonatomic, strong) LPFormEntity * _Nullable form;
@property (nonatomic, copy) NSString * _Nullable eventId;
@property (nonatomic, strong) NSOrderedSet * _Nullable customBoards;
@property (nonatomic, copy) NSString * _Nullable structureContentState;
@property (nonatomic, copy) void (^ _Nullable boardsBuildCompleted)(NSArray<LPCustomBoardEntity *> * _Nonnull);
@property (nonatomic, copy) void (^ _Nullable boardsBuildFailed)(NSError * _Nonnull);
/// time when UI requested to show ‘Sending’ text
@property (nonatomic, copy) NSDate * _Nullable requestedToShowSendingState;
@property (nonatomic, copy) NSDate * _Nonnull lastSendingTimestamp;
@property (nonatomic, copy) NSString * _Nullable maskedContent;
/// Migration for older agent messages types to new messages RemoteUser type
/// NOTE: JUNE 2016 - THIS METHOD CAN BE REMOVED AFTER THE NEXT 2-3 SDK RELEASES ARE OUT
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context SWIFT_UNAVAILABLE;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


@interface LPMessageEntity (SWIFT_EXTENSION(LPInfra))
@property (nonatomic, readonly) BOOL isSystemMessage;
@property (nonatomic, readonly) BOOL isRemoteMessage;
@property (nonatomic, readonly) BOOL isUserMessage;
@property (nonatomic, readonly) BOOL isStructuredContent;
+ (NSString * _Nonnull)buildUID:(NSString * _Nonnull)convUID sequence:(NSInteger)sequence SWIFT_WARN_UNUSED_RESULT;
+ (NSPredicate * _Nonnull)byDate:(NSDate * _Nonnull)date SWIFT_WARN_UNUSED_RESULT;
/// Get messages boards from message
/// If boards already exist, return it, else pending to boards build completion
/// \param completion completion with array of board. Array can be empty if there are no boards
///
- (void)getBoardsWithCompletion:(void (^ _Nonnull)(NSArray<LPCustomBoardEntity *> * _Nonnull))completion failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
@end

/// ENUM to list major features to control from config.
/// <ul>
///   <li>
///     PhotoSharing: The ability to send photos from consumer side.
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSInteger, LPMessagingSDKFeature) {
  LPMessagingSDKFeaturePhotoSharing = 0,
};


SWIFT_CLASS("_TtC7LPInfra11LPOperation")
@interface LPOperation : NSOperation
@property (nonatomic, getter=isExecuting) BOOL executing;
@property (nonatomic, getter=isFinished) BOOL finished;
@property (nonatomic, readonly, getter=isAsynchronous) BOOL asynchronous;
- (void)main;
- (void)start;
- (void)finishOperation;
- (void)cancel;
/// Cleaning operation when canceled
/// It is recommended to implement this method in sublclass and nullify blocks
- (void)clearOperationOnCancel;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSBundle;

SWIFT_CLASS("_TtC7LPInfra12LPSDKManager")
@interface LPSDKManager : NSObject <GeneralManagerProtocol>
@property (nonatomic) BOOL isWindowMode;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) LPSDKManager * _Nonnull instance;)
+ (LPSDKManager * _Nonnull)instance SWIFT_WARN_UNUSED_RESULT;
/// Fetch the bundle - LPMessagingSDKModels.bundle
///
/// returns:
/// Return a Bundle
+ (NSBundle * _Nullable)getBundle SWIFT_WARN_UNUSED_RESULT;
/// Fetch the SDKVersion from the current bundle
///
/// returns:
/// string with the current version. If failed to fetched returns nil
+ (NSString * _Nullable)getSDKVersion SWIFT_WARN_UNUSED_RESULT;
/// This method determines if the current SDK version is applicable according to 2 different validations:
/// <ol>
///   <li>
///     First validation will check with the value from LPCDN (which we use for all users), if version applicable procceed.
///   </li>
///   <li>
///     If LPCDN version is applicable, we check the version compared to ACCDN for the specific brand.
///     NOTE: In any case, if fail to get the setting from the services, proceed as the version was applicable.
///   </li>
/// </ol>
/// \param brandID brandID to determine its min sdk setting
///
/// \param completion a boolean in a completion block. The SDK is applicable if the current version is greater or euqal to the fetched value
///
+ (void)isVersionApplicableWithBrandID:(NSString * _Nonnull)brandID configurationKey:(NSString * _Nullable)configurationKey useCacheIfExists:(BOOL)useCacheIfExists completion:(void (^ _Nonnull)(BOOL, BOOL))completion;
/// Determines if a feature is enabled for account
/// <ol>
///   <li>
///     Fetch the static configuration data from LPCDN for global setting
///   </li>
///   <li>
///     If LPCDN setting is enabled, we check the feature with ACCDN for the specific brand.
///     NOTE: In any case, if fail to get the setting from the services, proceed as the feature enabled
///   </li>
/// </ol>
/// \param brandID brand/account id of the desired request
///
/// \param completion completion with boolean that shows if feature is enabled/disabled which calucluated using LPConfig, LPCDN and ACCDN
///
+ (void)isFeatureEnabledWithFeature:(enum LPMessagingSDKFeature)feature brandID:(NSString * _Nonnull)brandID useCacheIfExists:(BOOL)useCacheIfExists completion:(void (^ _Nonnull)(BOOL))completion;
- (void)clearManager;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC7LPInfra7LPTimer")
@interface LPTimer : NSObject
- (nonnull instancetype)initWithDuration:(NSTimeInterval)duration handler:(void (^ _Nonnull)(NSTimeInterval))handler OBJC_DESIGNATED_INITIALIZER;
- (void)start;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

typedef SWIFT_ENUM(NSInteger, LPUrlPreviewStyle) {
  LPUrlPreviewStyleSlim = 0,
  LPUrlPreviewStyleLarge = 1,
};


SWIFT_CLASS("_TtC7LPInfra6LPUser")
@interface LPUser : NSObject
@property (nonatomic, copy) NSString * _Nullable firstName;
@property (nonatomic, copy) NSString * _Nullable lastName;
@property (nonatomic, copy) NSString * _Nullable nickName;
@property (nonatomic, copy) NSString * _Nullable profileImageURL;
@property (nonatomic, copy) NSString * _Nullable phoneNumber;
@property (nonatomic, copy) NSString * _Nullable employeeID;
@property (nonatomic, copy) NSString * _Nullable uid;
- (nonnull instancetype)initWithUser:(LPUserEntity * _Nonnull)user;
- (nonnull instancetype)initWithFirstName:(NSString * _Nullable)firstName lastName:(NSString * _Nullable)lastName nickName:(NSString * _Nullable)nickName uid:(NSString * _Nullable)uid profileImageURL:(NSString * _Nullable)profileImageURL phoneNumber:(NSString * _Nullable)phoneNumber employeeID:(NSString * _Nullable)employeeID OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC7LPInfra12LPUserEntity")
@interface LPUserEntity : NSManagedObject
@property (nonatomic, copy) NSString * _Nonnull uid;
@property (nonatomic, copy) NSString * _Nonnull firstName;
@property (nonatomic, copy) NSString * _Nonnull lastName;
@property (nonatomic, copy) NSString * _Nullable nickName;
@property (nonatomic, copy) NSString * _Nullable profileImageURL;
@property (nonatomic, copy) NSString * _Nullable coverImageURL;
@property (nonatomic, copy) NSString * _Nullable phoneNumber;
@property (nonatomic, copy) NSString * _Nonnull typeRaw;
@property (nonatomic, copy) NSString * _Nullable bio;
@property (nonatomic, strong) NSSet * _Nonnull userMessages;
@property (nonatomic) BOOL isSaved;
@property (nonatomic, copy) NSDate * _Nullable lastUpdated;
@property (nonatomic, copy) NSString * _Nullable employeeID;
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end


@interface LPUserEntity (SWIFT_EXTENSION(LPInfra))
@property (nonatomic, readonly, copy) NSString * _Nonnull fullName;
@property (nonatomic, readonly) BOOL isMe;
@end


SWIFT_CLASS("_TtC7LPInfra19LPUserProfileEntity")
@interface LPUserProfileEntity : LPUserEntity
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end


@interface LPUserProfileEntity (SWIFT_EXTENSION(LPInfra))
@end

@class SRSecurityPolicy;

SWIFT_CLASS("_TtC7LPInfra11LPWebSocket")
@interface LPWebSocket : SRWebSocket
@property (nonatomic, copy) NSString * _Nonnull requestIndex;
@property (nonatomic, readonly) BOOL isOpen;
@property (nonatomic, readonly) BOOL isClosed;
@property (nonatomic, readonly) BOOL isReadyToOpen;
- (void)flushQueue;
@property (nonatomic, copy) NSURL * _Null_unspecified socketURL;
- (void)cancelRequest:(NSString * _Nonnull)requestIndex;
- (void)open;
- (void)close;
- (nonnull instancetype)initWithURLRequest:(NSURLRequest * _Nonnull)request protocols:(NSArray<NSString *> * _Nullable)protocols securityPolicy:(SRSecurityPolicy * _Nonnull)securityPolicy SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC7LPInfra16LanguagesManager")
@interface LanguagesManager : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSDictionary<NSString *, NSString *> * _Nonnull supportedLanguages;)
+ (NSDictionary<NSString *, NSString *> * _Nonnull)supportedLanguages SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) LanguagesManager * _Nonnull instance;)
+ (LanguagesManager * _Nonnull)instance SWIFT_WARN_UNUSED_RESULT;
/// Prints all localized strings keys
+ (void)printAllKeys;
/// Prints the SDK supported languages
+ (void)printSupportedLanguages;
/// Get all supported languages by key-value (key is locale key and value is language description), call the following:
+ (NSDictionary<NSString *, NSString *> * _Nonnull)getAllSupportedLanguages SWIFT_WARN_UNUSED_RESULT;
/// Get the language to use in SDK from native preferred language
/// <ol>
///   <li>
///     Get the first object from preferredLanguages and try to find it in our supported languages enum. If found, set it as default
///   </li>
///   <li>
///     If the language not found, try to take only the language itself (without the region) and do the same. If found, set it as default
///   </li>
///   <li>
///     If nothing found - set “en” as default language
///   </li>
/// </ol>
+ (NSString * _Nonnull)sdkLanguageFromLocalePreferredLanguage SWIFT_WARN_UNUSED_RESULT;
@end

enum LogLevel : NSInteger;

SWIFT_CLASS("_TtC7LPInfra8LogEvent")
@interface LogEvent : NSObject
@property (nonatomic, readonly) enum LogLevel logLevel;
@property (nonatomic, readonly, copy) NSString * _Nonnull className;
@property (nonatomic, readonly, copy) NSString * _Nonnull functionName;
@property (nonatomic, readonly, copy) NSString * _Nonnull message;
@property (nonatomic, readonly, copy) NSDate * _Nonnull timestamp;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

typedef SWIFT_ENUM(NSInteger, LogLevel) {
  LogLevelTrace = 0,
  LogLevelDebug = 1,
  LogLevelInfo = 2,
  LogLevelWarning = 3,
  LogLevelError = 4,
  LogLevelOff = 5,
};


SWIFT_CLASS("_TtC7LPInfra21MessagingServiceEvent")
@interface MessagingServiceEvent : NSObject
@property (nonatomic, readonly, copy) NSString * _Nullable eventId;
@property (nonatomic, readonly, strong) LPConversationEntity * _Null_unspecified conversation;
@property (nonatomic, readonly, strong) LPUserEntity * _Nullable sender;
@property (nonatomic, copy) void (^ _Nullable fileMessageCompletion)(LPMessageEntity * _Nonnull);
@property (nonatomic, copy) void (^ _Nullable fileMessageFailure)(NSError * _Nonnull);
- (nullable instancetype)initWithFailure OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


@interface NSManagedObject (SWIFT_EXTENSION(LPInfra))
- (void)saveContext;
/// Determines whether the object was delete or it still exists in its managedObjectContext
@property (nonatomic, readonly) BOOL isValid;
/// Returns objectID string representation if the object is not temporary. Otherwise returns nil
@property (nonatomic, readonly, copy) NSString * _Nullable objectIDPermanentString;
@end


@interface NSObject (SWIFT_EXTENSION(LPInfra))
/// Creates JSON dictionary for any object by:
/// Dictionary is based on object’s properties as keys and their value
/// keys = properties names
/// values = properties values
- (NSDictionary<NSString *, id> * _Nonnull)serializeToDictionary SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC7LPInfra23OnlineEventDistribution")
@interface OnlineEventDistribution : GeneralResponse
- (nonnull instancetype)initWithJsonDict:(NSDictionary<NSString *, id> * _Nonnull)jsonDict OBJC_DESIGNATED_INITIALIZER;
@end


@interface NSOperationQueue (SWIFT_EXTENSION(LPInfra))
+ (NSOperationQueue * _Nonnull)sharedOperationQueue SWIFT_WARN_UNUSED_RESULT;
@end


@interface NSOutputStream (SWIFT_EXTENSION(LPInfra))
@end


SWIFT_CLASS("_TtC7LPInfra12PublishEvent")
@interface PublishEvent : GeneralResponse
- (nonnull instancetype)initWithJsonDict:(NSDictionary<NSString *, id> * _Nonnull)jsonDict OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC7LPInfra13QueryMessages")
@interface QueryMessages : GeneralResponse
- (nonnull instancetype)initWithJsonDict:(NSDictionary<NSString *, id> * _Nonnull)jsonDict OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC7LPInfra19RequestConversation")
@interface RequestConversation : GeneralResponse
- (nonnull instancetype)initWithJsonDict:(NSDictionary<NSString *, id> * _Nonnull)jsonDict OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC7LPInfra15RequestSwiftURL")
@interface RequestSwiftURL : GeneralResponse
- (nonnull instancetype)initWithJsonDict:(NSDictionary<NSString *, id> * _Nonnull)jsonDict OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC7LPInfra4Ring")
@interface Ring : NSObject
@property (nonatomic, copy) NSString * _Nullable ringID;
@property (nonatomic, copy) NSString * _Nullable brandId;
@property (nonatomic, copy) NSString * _Nullable conversationID;
@property (nonatomic, copy) NSString * _Nullable consumerId;
@property (nonatomic, copy) NSString * _Nullable skillId;
@property (nonatomic, copy) NSDate * _Nullable ringExpiration;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC7LPInfra11RingUpdated")
@interface RingUpdated : GeneralResponse
- (nonnull instancetype)initWithJsonDict:(NSDictionary<NSString *, id> * _Nonnull)jsonDict OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC7LPInfra23RoutingTaskNotification")
@interface RoutingTaskNotification : GeneralResponse
- (nonnull instancetype)initWithJsonDict:(NSDictionary<NSString *, id> * _Nonnull)jsonDict OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC7LPInfra25SecureFormReadOTKResponse")
@interface SecureFormReadOTKResponse : GeneralResponse
- (nonnull instancetype)initWithJsonDict:(NSDictionary<NSString *, id> * _Nonnull)jsonDict OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC7LPInfra22SubscribeConversations")
@interface SubscribeConversations : GeneralResponse
- (nonnull instancetype)initWithJsonDict:(NSDictionary<NSString *, id> * _Nonnull)jsonDict OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC7LPInfra24SubscribeExConversations")
@interface SubscribeExConversations : GeneralResponse
- (nonnull instancetype)initWithJsonDict:(NSDictionary<NSString *, id> * _Nonnull)jsonDict OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC7LPInfra8TTRModel")
@interface TTRModel : NSObject
@property (nonatomic, copy) NSDate * _Null_unspecified effectiveTTR;
@property (nonatomic, copy) NSDate * _Nullable manualETTR;
@property (nonatomic, copy) NSDate * _Nullable delay;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

@class NSCoder;

SWIFT_CLASS("_TtC7LPInfra5Toast")
@interface Toast : UIView
@property (nonatomic, copy) NSString * _Nullable name;
@property (nonatomic, copy) void (^ _Nullable didShow)(void);
@property (nonatomic, copy) void (^ _Nullable didDismiss)(void);
@property (nonatomic, copy) void (^ _Nullable didTap)(void);
- (void)awakeFromNib;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

@class UIViewController;

SWIFT_CLASS("_TtC7LPInfra7Toaster")
@interface Toaster : UIView
@property (nonatomic, readonly, strong) Toast * _Nullable current;
/// Inits the toast object with container view controller
- (nonnull instancetype)initWithContainerViewController:(UIViewController * _Nonnull)containerViewController;
/// Receives a toast and puts it at the correct index inside the toasts array
/// \param toast toast object
///
- (void)addWithToast:(Toast * _Nonnull)toast;
/// Dissmisses a specific toast instance
/// If the toast is showing, it animates it out, if not, it just removes it from the list
/// If it doesn’t exist, nothing will happen
/// \param toast toast instance
///
- (void)dismissWithToast:(Toast * _Nonnull)toast;
/// Dismisses all toasts of a specific type
/// \param type A type of toast to dismiss
///
- (void)dismissToastByName:(NSString * _Nonnull)name;
/// Dissmis all toasts
- (void)dismissAll;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


@interface UIColor (SWIFT_EXTENSION(LPInfra))
- (nonnull instancetype)initWithRgba:(NSString * _Nonnull)rgba;
@end


@interface UIDevice (SWIFT_EXTENSION(LPInfra))
/// Get the model name of device.
/// For example, will appear as iPhone8,1 which means iPhone 6s.
/// Each known model name can include several machine names. For example: for “iPad 2” can be returned one of the following: “iPad2,1”, “iPad2,2”, “iPad2,3”, “iPad2,4”
/// http://stackoverflow.com/questions/26028918/ios-how-to-determine-iphone-model-in-swift
@property (nonatomic, readonly, copy) NSString * _Nonnull modelName;
@end


@interface UIFont (SWIFT_EXTENSION(LPInfra))
/// Get Size of a String for a label size and constraints
/// \param string string/text to get the size for
///
/// \param width max width of the label
///
///
/// returns:
/// CGSize instance of the text
- (CGSize)sizeOfStringWithString:(NSString * _Nonnull)string constrainedToWidth:(double)width SWIFT_WARN_UNUSED_RESULT;
@end


@interface UIImage (SWIFT_EXTENSION(LPInfra))
- (UIImage * _Nonnull)imageWithTint:(UIColor * _Nonnull)tint SWIFT_WARN_UNUSED_RESULT;
/// Get UIImage resized by provided size
- (UIImage * _Nonnull)resizeImageWithTargetSize:(CGSize)targetSize scale:(CGFloat)scale SWIFT_WARN_UNUSED_RESULT;
/// Returns resized image size with a condition of a max height and max width
+ (CGSize)getResizedImageSizeWithImage:(UIImage * _Nonnull)image maxHeight:(CGFloat)maxHeight maxWidth:(CGFloat)maxWidth SWIFT_WARN_UNUSED_RESULT;
/// Gets an image, blur and return it
/// if process failed it will return a nil
- (UIImage * _Nullable)blurImageWithRadius:(CGFloat)radius size:(CGSize)size SWIFT_WARN_UNUSED_RESULT;
@end


@interface UINavigationController (SWIFT_EXTENSION(LPInfra))
/// Get font of the navigation bar title
///
/// returns:
/// UIFont instance if exist, nil if no title is set
- (UIFont * _Nullable)getNavigationBarTitleFont SWIFT_WARN_UNUSED_RESULT;
@end


@interface UIWindow (SWIFT_EXTENSION(LPInfra))
/// Find the Top Most presented view controller on the UIWindow.
- (UIViewController * _Nullable)topViewController SWIFT_WARN_UNUSED_RESULT;
@end


@interface NSUserDefaults (SWIFT_EXTENSION(LPInfra))
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) NSUserDefaults * _Nonnull lpStandard;)
+ (NSUserDefaults * _Nonnull)lpStandard SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC7LPInfra5Utils")
@interface Utils : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) dispatch_queue_t _Nonnull backgroundQueue;)
+ (dispatch_queue_t _Nonnull)backgroundQueue SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nullable)JSONStringify:(NSDictionary<NSString *, id> * _Nonnull)value prettyPrinted:(BOOL)prettyPrinted SWIFT_WARN_UNUSED_RESULT;
+ (NSDictionary<NSString *, id> * _Nullable)JSONDictionaryFromString:(NSString * _Nonnull)string SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)formatDate:(NSDate * _Nonnull)date SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)trim:(NSString * _Nonnull)str SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)isValidEmail:(NSString * _Nonnull)testStr SWIFT_WARN_UNUSED_RESULT;
+ (void)delay:(double)delay closure:(void (^ _Nonnull)(void))closure;
+ (NSInteger)minutesBetweenDates:(NSDate * _Nonnull)startDate endDate:(NSDate * _Nonnull)endDate SWIFT_WARN_UNUSED_RESULT;
+ (void)backgroundThread:(void (^ _Nonnull)(void))job;
+ (void)mainThread:(void (^ _Nonnull)(void))job;
/// Returns a random Int number from min to max
+ (NSInteger)randWithMin:(NSInteger)min max:(NSInteger)max SWIFT_WARN_UNUSED_RESULT;
/// Returns resized image size with a condition of a max height and max width
+ (CGSize)getResizedImageSizeWithImage:(UIImage * _Nonnull)image maxHeight:(CGFloat)maxHeight maxWidth:(CGFloat)maxWidth SWIFT_WARN_UNUSED_RESULT;
/// Get external IP Address of the device. This method is using an external url to determine the ip address and analyises it.
+ (void)getExternalIPAddressWithCompletion:(void (^ _Nonnull)(NSString * _Nullable))completion;
+ (id _Nonnull)unwrapWithAny:(id _Nonnull)any SWIFT_WARN_UNUSED_RESULT;
/// Show Local iOS notification
+ (void)showLocalNotification:(NSString * _Nonnull)text uid:(NSString * _Nullable)uid;
/// Play vibration sound based on iOS system vibration method
+ (void)playVibrationSound;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

#pragma clang diagnostic pop
